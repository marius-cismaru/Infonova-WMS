<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:e="clr-namespace:WpfExtensions.AttachedProps;assembly=WpfExtensions">

   <ResourceDictionary.MergedDictionaries>
      <ResourceDictionary Source="Button.xaml"/>
      <ResourceDictionary Source="ScrollViewer.xaml"/>
      <ResourceDictionary Source="ListView.xaml"/>
      <ResourceDictionary Source="RadioButton.xaml"/>
   </ResourceDictionary.MergedDictionaries>

   <!-- TextBlock -->
   <Style TargetType="{x:Type TextBlock}">
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Margin" Value="3"/>
   </Style>

   <!-- CheckBox -->
   <Style TargetType="{x:Type CheckBox}">
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Margin" Value="3"/>
   </Style>

   <!-- TextBox -->
   <Style TargetType="{x:Type TextBox}">
      <Setter Property="Height" Value="20"/>
      <Style.Triggers>
         <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="LightYellow"/>
         </Trigger>
         <Trigger Property="IsFocused" Value="True">
            <Setter Property="Background" Value="LightYellow"/>
            <Setter Property="e:TextBox.SelectAllOnFocus" Value="True"/>
         </Trigger>
         <Trigger Property="IsReadOnly" Value="True">
            <Setter Property="Background" Value="AliceBlue"/>
         </Trigger>
      </Style.Triggers>
   </Style>

   <!-- PasswordBox -->
   <Style TargetType="{x:Type PasswordBox}">
      <Setter Property="Height" Value="20"/>
      <Style.Triggers>
         <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="LightYellow"/>
         </Trigger>
         <Trigger Property="IsFocused" Value="True">
            <Setter Property="Background" Value="LightYellow"/>
         </Trigger>
      </Style.Triggers>
   </Style>

   <!-- TabControl -->
   <Style TargetType="{x:Type TabControl}">
      <Setter Property="Margin" Value="5"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabControl}">
               <Grid>
                  <Grid.RowDefinitions>
                     <RowDefinition Height="Auto"/>
                     <RowDefinition Height="*"/>
                  </Grid.RowDefinitions>
                  <TabPanel Grid.Row="0" Panel.ZIndex="1" Margin="0,0,4,-1"
                            IsItemsHost="True" Background="Transparent"/>
                  <Border Grid.Row="1" BorderBrush="LightGray" BorderThickness="1" 
                          CornerRadius="0,3,3,3">
                     <ContentPresenter ContentSource="SelectedContent" Margin="10"/>
                  </Border>
               </Grid>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- TabItem -->
   <Style TargetType="{x:Type TabItem}">
      <Setter Property="Content" Value="{Binding View}"/>
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
               <Grid>
                  <Border Name="Border" BorderBrush="LightGray" BorderThickness="1" CornerRadius="3,3,0,0" Margin="0,0,5,0">
                     <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Header}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="15,0,15,0"/>
                        <Button Name="btnClose" Margin="3" Command="{Binding CloseCommand}" CommandParameter="{Binding View.DataContext}"
                                Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                           <Button.Content>
                              <Image Source="/Sirius.Resources;component/Images/close.png" Width="15" Height="15" Opacity="0.6"/>
                           </Button.Content>
                        </Button>
                     </StackPanel>
                  </Border>
               </Grid>
               <ControlTemplate.Triggers>
                  <Trigger Property="IsSelected" Value="True">
                     <Setter TargetName="Border" Property="Background" Value="LightGreen" />
                  </Trigger>
                  <Trigger Property="IsSelected" Value="False">
                     <Setter TargetName="Border" Property="Background" Value="LightGray" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- Expander -->
   <Style TargetType="{x:Type Expander}">
      <!--<Setter Property="Background">
         <Setter.Value>
            <LinearGradientBrush>
               <GradientStop Color="#00E2E2F8" Offset="0"/>
               <GradientStop Color="White" Offset="1"/>
            </LinearGradientBrush>
         </Setter.Value>
      </Setter>-->
      <!--<Setter Property="IsExpanded" Value="True"/>-->
      <Setter Property="Foreground" Value="Black"/>
      <Setter Property="Margin" Value="3"/>
      <Setter Property="BorderThickness" Value="1"/>
      <Setter Property="BorderBrush" Value="LightGray"/>
   </Style>

</ResourceDictionary>